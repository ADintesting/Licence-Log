import os
from tkinter import *
from tkinter import filedialog as fd
import matplotlib.pyplot as plt
import pandas as pd
from matplotlib.pyplot import plot, show, xlabel, ylabel, figure, yticks, gcf
import matplotlib.dates as mdates
from datetime import datetime, timedelta
import numpy as np


def get_directory():
    window = Tk()
    window.title("Licence Log Analyser")
    window.config(padx=50, pady=50)
    canvas = Canvas(height=200, width=300)

    log_file_label = Label(text="Select log file:")
    log_file_label.grid(column=0, row=0, sticky='w')
    selected_file = Label(text="")
    selected_file.grid(column=0, row=1, sticky='w')
    csv_file_label2 = Label(text="")

    select_button = Button(text="Select", width=15, command=lambda: select_file(selected_file))
    select_button.grid(column=1, row=0)

    close_button = Button(text="Close", width=15, command=lambda: close_event(window))
    close_button.grid(column=2, row=3, sticky="e")

    analyse_button = Button(text="Analyse", width=15,
                            command=lambda: analyse(selected_file.cget("text"), csv_file_label2))
    analyse_button.grid(column=0, row=3, sticky="e")

    window.mainloop()


def select_file(name_label):
    filename = fd.askopenfilename(title="Choose log file", initialdir="/", filetypes=[("log files","*.log")])
    name_label.config(text=filename)
    name_label.update()
    return

def close_event(window):
    window.destroy()


def get_files(directory, exts):
    # return list of file names in given directory which match one of the list of extensions
    file_names = [fn for fn in os.listdir(directory)
                  if any(fn.endswith(ext) for ext in exts)]

    return file_names


def plot_licences(file_name_label):
    # csv file generated by analyse function and uses pandas to create graphs
    df = pd.read_csv(file_name_label.cget("text"))

    # Takes a list of pandas dataframe objects and produces a plot of number of licences being used over time
    product_dfs = df.groupby("product")
    num_products = product_dfs.ngroups

    df['datetime'] = pd.to_datetime(df["date"] + " " + df["time"], format="%d/%m/%Y %H:%M:%S")

    pivot = pd.pivot_table(df, index="datetime", values='licence', columns='product', fill_value=0).cumsum().reset_index()
    print(pivot["solidworks"])

    for column in pivot.columns[1:]:
        plot(pivot.datetime,
                 pivot[column],
                 linewidth=1,
                 label=pivot[column].name)
    plt.legend(fontsize=8)
    plt.show()

    # for name, product in product_dfs:
    #     product['licence_usage'] = product['licence'].cumsum()
    #     product['datetime'] = pd.to_datetime(product["date"] + " " + product["time"],
    #                                            format="%d/%m/%Y %H:%M:%S")
    #     figure(figsize=(14, 10))
    #     plot(product.datetime, product.licence_usage, label=name)
    #     plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d/%m %H:%M'))
    #     gcf().autofmt_xdate()
    #     xlabel("Time")
    #     ylabel("Licences used")
    #     yticks([y for y in range(product.licence_usage.min(), product.licence_usage.max()+1)])
    #     plt.legend(fontsize=10)
    #
    #     show()


def analyse(file, file_name_label):
    log_csv_ext = "_log.csv"                # extension to use for output

    log_lines = []                        # list of lines to write to output csv (per file)
    with open(file, 'r') as log_file:
        lines = log_file.readlines()
        hour = 0
        for line in lines:
            if "Start-Date: " in line:
                date_string = line.split("Start-Date: ")[1].split(" GMT")[0]
                hour = int(date_string[16:18])
                date_string = date_string[:15]
                date = datetime.strptime(date_string, '%a %b %d %Y')
            if "OUT:" in line or "IN:" in line:     # record licences as affect on number of used licences
                if "OUT:" in line:
                    log_direction = 1
                else:
                    log_direction = -1
                log_time = line[:8]
                new_hour = int(log_time[:2])
                if new_hour < hour:                     # crossed into new day, increase date
                    date = date + timedelta(days=1)
                hour = new_hour
                log_user = line.split(" ")[-3]
                log_product = line.split(' "')[1].split('" ')[0]
                log_lines.append({"date": date.strftime('%d/%m/%Y'),
                                  "time": log_time,
                                  "product": log_product,
                                  "licence": log_direction,
                                  "user": log_user})

    name_log_csv = file.split('.')[-2] + log_csv_ext

    # delete existing csv if it exists
    if os.path.isfile(name_log_csv):
        os.remove(name_log_csv)
        print("Delete old log file.")

    # create csv for use with pandas
    with open(name_log_csv, 'a') as log_csv_file:
        print("Creating new log file.")
        log_csv_file.write("date,time,product,licence,user\n")

        for log_line in log_lines:
            log_csv_file.write(f"{log_line['date']},"
                               f"{log_line['time']},"
                               f"{log_line['product']},"
                               f"{log_line['licence']},"
                               f"{log_line['user']}\n")

        print(f"log file updated: {log_csv_file.name}")

    file_name_label.config(text=log_csv_file.name)
    file_name_label.update()

    plot_licences(file_name_label)


if __name__ == "__main__":
    get_directory()
